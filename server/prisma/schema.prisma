datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  user_id    Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  email      String   @unique
  role       Role
  created_at DateTime @default(now())

  students   Student[] // Establishes a one-to-many relationship with Student

  @@map("tbl_users")
}

model Student {
  student_id         Int              @id @default(autoincrement())
  user_id            Int
  first_name         String
  last_name          String
  year_level_type    YearLevelTypeEnum // Use enum instead of year_level_id
  strand_id          Int?
  course_id          Int?
  tesda_course_id    Int?

  User               User            @relation(fields: [user_id], references: [user_id]) // Many-to-one relationship with User
  Strand            Strand?         @relation(fields: [strand_id], references: [strand_id]) // Many-to-one relationship with Strand (optional)
  Course            Course?         @relation(fields: [course_id], references: [course_id]) // Many-to-one relationship with Course (optional)
  TesdaCourse       TesdaCourse?    @relation(fields: [tesda_course_id], references: [tesda_course_id]) // Many-to-one relationship with TesdaCourse (optional)

  evaluations       Evaluation[] // Establishes a one-to-many relationship with Evaluation

  @@map("tbl_students")
}

model Event {
  event_id          Int          @id @default(autoincrement())
  admin_id          Int
  event_title       String
  event_description String?
  start_date        DateTime
  end_date          DateTime
  status            EventStatus   @default(active)
  created_at        DateTime      @default(now())

  evaluations       Evaluation[]      // Establishes a one-to-many relationship with Evaluation
  criteria         EventCriteria[]    // Establishes a one-to-many relationship with EventCriteria

  @@map("tbl_events")
}

model EventCriteria {
  criteria_id      Int       @id @default(autoincrement())
  event_id         Int
  criteria_name    String
  max_score        Int

  event            Event     @relation(fields: [event_id], references: [event_id]) // Many-to-one relationship with Event
  details         EvaluationDetail[] // Establishes a one-to-many relationship with EvaluationDetail

  @@map("tbl_event_criteria")
}

model Evaluation {
  evaluation_id    Int        @id @default(autoincrement())
  event_id         Int
  student_id       Int
  feedback_text    String?    // Optional feedback text from the student

  event            Event      @relation(fields: [event_id], references: [event_id]) // Many-to-one relationship with Event
  student          Student    @relation(fields: [student_id], references: [student_id]) // Many-to-one relationship with Student

  details          EvaluationDetail[] // Establishes a one-to-many relationship with EvaluationDetail

  @@map("tbl_evaluations")
}

model EvaluationDetail {
  evaluation_detail_id Int @id @default(autoincrement())
  evaluation_id       Int
  criteria_id         Int
  score               Int

  evaluation          Evaluation @relation(fields: [evaluation_id], references: [evaluation_id]) // Many-to-one relationship with Evaluation
  criteria            EventCriteria @relation(fields: [criteria_id], references: [criteria_id]) // Many-to-one relationship with EventCriteria

  @@map("tbl_evaluation_details")
}

model Strand {
  strand_id     Int      @id @default(autoincrement())
  strand_name   String

  students      Student[] // Establishes a one-to-many relationship with Student

  @@map("tbl_strand")
}

model Course {
  course_id     Int      @id @default(autoincrement())
  course_name   String

  students      Student[] // Establishes a one-to-many relationship with Student

  @@map("tbl_courses")
}

model TesdaCourse {
  tesda_course_id Int    @id @default(autoincrement())
  course_name     String

  students        Student[] // Establishes a one-to-many relationship with Student

  @@map("tbl_tesda_courses")
}

enum Role {
  admin
  student
}

enum EventStatus {
  active
  ongoing
  completed
  cancelled
}

enum YearLevelTypeEnum { // Define the enum for year levels
  COLLEGE
  TESDA
  SENIOR_HIGH
}
